import os
import telebot
from telebot import types
from sqlalchemy import create_engine, func
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, Boolean, Date, ForeignKey, JSON
from sqlalchemy.orm import relationship
from sqlalchemy.orm import declarative_base
import datetime
import csv
from io import StringIO, BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
TOKEN = '7881074741:AAH9AQJT1awELeNcT5HDa43MNzt9mpkQrD0'
bot = telebot.TeleBot(TOKEN)

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID)
ADMIN_IDS = [1982507378, 5271204621, 1053723113]  # –ü—Ä–∏–º–µ—Ä ID, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = 'sqlite:///C:/Users/–ò–≤–∞–Ω/PycharmProjects/abobych/donor.db'
Base = declarative_base()
engine = create_engine(DATABASE_URL, echo=False)
Session = sessionmaker(bind=engine)
session = Session()


# ====================== –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ======================
class User(Base):
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, unique=True)
    phone = Column(String(20))
    name = Column(String(100))
    donor_type = Column(String(20))  # student, staff, external
    group = Column(String(20), nullable=True)
    consent_given = Column(Boolean, default=False)
    consent_date = Column(Date, nullable=True)
    in_bm_registry = Column(Boolean, default=False)
    registered_events = Column(JSON, default=[])

    donations = relationship("Donation", back_populates="user")
    questions = relationship("Question", back_populates="user")


class Donation(Base):
    """–ú–æ–¥–µ–ª—å –¥–æ–Ω–∞—Ü–∏–∏"""
    __tablename__ = 'donations'

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'))
    date = Column(Date)
    center = Column(String(100))
    successful = Column(Boolean, default=True)

    user = relationship("User", back_populates="donations")


class Event(Base):
    """–ú–æ–¥–µ–ª—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    __tablename__ = 'events'

    id = Column(Integer, primary_key=True)
    date = Column(Date)
    center = Column(String(100))
    slots_available = Column(Integer)
    is_active = Column(Boolean, default=True)


class Question(Base):
    """–ú–æ–¥–µ–ª—å –≤–æ–ø—Ä–æ—Å–∞"""
    __tablename__ = 'questions'

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'))
    text = Column(String(1000))
    answered = Column(Boolean, default=False)
    answer = Column(String(1000), nullable=True)
    timestamp = Column(Date, default=datetime.datetime.now)

    user = relationship("User", back_populates="questions")


class Organizer(Base):
    """–ú–æ–¥–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞"""
    __tablename__ = 'organizers'

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'))
    is_active = Column(Boolean, default=True)

    user = relationship("User")


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
Base.metadata.create_all(engine)


# ====================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ======================
def is_admin(chat_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return chat_id in ADMIN_IDS


def is_organizer(chat_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º"""
    if not is_admin(chat_id):
        return False

    user = session.query(User).filter_by(chat_id=chat_id).first()
    if not user:
        return False
    organizer = session.query(Organizer).filter_by(user_id=user.id, is_active=True).first()
    return organizer is not None


def get_organizer_management_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞'))
    keyboard.add(types.KeyboardButton('–°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤'))
    keyboard.add(types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞'))
    keyboard.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
    return keyboard


def get_organizer_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–Ω–æ—Ä–∞–º–∏'))
    keyboard.add(types.KeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏'))
    keyboard.add(types.KeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏'))
    keyboard.add(types.KeyboardButton('–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã'))
    keyboard.add(types.KeyboardButton('–†–∞—Å—Å—ã–ª–∫–∏'))
    keyboard.add(types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
    keyboard.add(types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'))
    return keyboard


def get_donor_management_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –¥–æ–Ω–æ—Ä–∞'))
    keyboard.add(types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–Ω–æ—Ä–∞'))
    keyboard.add(types.KeyboardButton('–ò–º–ø–æ—Ä—Ç –¥–æ–Ω–æ—Ä–æ–≤'))
    keyboard.add(types.KeyboardButton('–≠–∫—Å–ø–æ—Ä—Ç –¥–æ–Ω–æ—Ä–æ–≤'))
    keyboard.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
    return keyboard


def get_event_management_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'))
    keyboard.add(types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'))
    keyboard.add(types.KeyboardButton('–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π'))
    keyboard.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
    return keyboard


def get_mailing_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'))
    keyboard.add(types.KeyboardButton('–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏–º—Å—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'))
    keyboard.add(types.KeyboardButton('–ù–µ –ø—Ä–∏—à–µ–¥—à–∏–º –Ω–∞ –ø–µ—Ä–≤—É—é –¥–∞—Ç—É'))
    keyboard.add(types.KeyboardButton('–í —Ä–µ–≥–∏—Å—Ç—Ä–µ –î–ö–ú'))
    keyboard.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
    return keyboard


def get_statistics_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º'))
    keyboard.add(types.KeyboardButton('–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'))
    keyboard.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
    return keyboard


# ====================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ======================
@bot.message_handler(commands=['start'])
def handle_start(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
                     reply_markup=get_organizer_keyboard())


@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥')
def handle_back(message):
    if not is_admin(message.chat.id):
        return

    bot.send_message(message.chat.id, "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_organizer_keyboard())


# ====================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–†–ì–ê–ù–ò–ó–ê–¢–û–†–ê–ú–ò ======================
@bot.message_handler(func=lambda message: message.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏')
def handle_organizer_management(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    bot.send_message(message.chat.id, "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏", reply_markup=get_organizer_management_keyboard())


@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞')
def handle_add_organizer(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    msg = bot.send_message(message.chat.id,
                           "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567):")
    bot.register_next_step_handler(msg, process_add_organizer)


def process_add_organizer(message):
    if not is_admin(message.chat.id):
        return

    try:
        phone = message.text.strip()
        user = session.query(User).filter_by(phone=phone).first()

        if not user:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º
        existing = session.query(Organizer).filter_by(user_id=user.id).first()
        if existing:
            if existing.is_active:
                bot.send_message(message.chat.id, "‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º.")
            else:
                existing.is_active = True
                session.commit()
                bot.send_message(message.chat.id, "‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
        new_organizer = Organizer(user_id=user.id, is_active=True)
        session.add(new_organizer)
        session.commit()

        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä!")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.chat_id:
            try:
                bot.send_message(user.chat_id,
                                 "üéâ –í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.")
            except:
                pass

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(func=lambda message: message.text == '–°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤')
def handle_list_organizers(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    organizers = session.query(Organizer).filter_by(is_active=True).all()

    if not organizers:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤.")
        return

    response = "üìã –°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤:\n\n"
    for org in organizers:
        user = session.query(User).get(org.user_id)
        response += f"üîπ ID: {org.id}\nüë§ –§–ò–û: {user.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n\n"

    bot.send_message(message.chat.id, response)


@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞')
def handle_remove_organizer(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    organizers = session.query(Organizer).filter_by(is_active=True).all()
    if not organizers:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    response = "üóëÔ∏è –°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ (—É–∫–∞–∂–∏—Ç–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):\n\n"
    for org in organizers:
        user = session.query(User).get(org.user_id)
        response += f"ID: {org.id} - {user.name} ({user.phone})\n"

    msg = bot.send_message(message.chat.id, response)
    bot.register_next_step_handler(msg, process_remove_organizer)


def process_remove_organizer(message):
    if not is_admin(message.chat.id):
        return

    try:
        org_id = int(message.text.strip())
        organizer = session.query(Organizer).get(org_id)

        if not organizer or not organizer.is_active:
            bot.send_message(message.chat.id, "‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user = session.query(User).get(organizer.user_id)

        # –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è)
        organizer.is_active = False
        session.commit()

        bot.send_message(message.chat.id, f"‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä {user.name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.chat_id:
            try:
                bot.send_message(user.chat_id, "‚ÑπÔ∏è –í–∞—à–∏ –ø—Ä–∞–≤–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã.")
            except:
                pass

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ).")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# ====================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–û–ù–û–†–ê–ú–ò ======================
@bot.message_handler(func=lambda message: message.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–Ω–æ—Ä–∞–º–∏')
def handle_donor_management(message):
    if not is_admin(message.chat.id) and not is_organizer(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    bot.send_message(message.chat.id, "ü©∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–Ω–æ—Ä–∞–º–∏", reply_markup=get_donor_management_keyboard())


@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –¥–æ–Ω–æ—Ä–∞')
def handle_add_donor(message):
    if not is_admin(message.chat.id) and not is_organizer(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    msg = bot.send_message(message.chat.id,
                           "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–Ω–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–§–ò–û;–¢–µ–ª–µ—Ñ–æ–Ω;–¢–∏–ø(—Å—Ç—É–¥–µ–Ω—Ç/—Å–æ—Ç—Ä—É–¥–Ω–∏–∫/–≤–Ω–µ—à–Ω–∏–π);–ì—Ä—É–ø–ø–∞(–µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç);–°–æ–≥–ª–∞—Å–∏–µ(–¥–∞/–Ω–µ—Ç);–í —Ä–µ–≥–∏—Å—Ç—Ä–µ –î–ö–ú(–¥–∞/–Ω–µ—Ç)")
    bot.register_next_step_handler(msg, process_add_donor)


def process_add_donor(message):
    if not is_admin(message.chat.id) and not is_organizer(message.chat.id):
        return

    try:
        data = message.text.split(';')
        name = data[0].strip()
        phone = data[1].strip()
        donor_type = data[2].strip().lower()
        group = data[3].strip() if len(data) > 3 else None
        consent = data[4].strip().lower() == '–¥–∞' if len(data) > 4 else False
        in_bm_registry = data[5].strip().lower() == '–¥–∞' if len(data) > 5 else False

        new_user = User(
            name=name,
            phone=phone,
            donor_type=donor_type,
            group=group,
            consent_given=consent,
            in_bm_registry=in_bm_registry,
            consent_date=datetime.date.today() if consent else None
        )

        session.add(new_user)
        session.commit()

        bot.send_message(message.chat.id, f"‚úÖ –î–æ–Ω–æ—Ä {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(func=lambda message: message.text == '–ò–º–ø–æ—Ä—Ç –¥–æ–Ω–æ—Ä–æ–≤')
def handle_import_donors(message):
    if not is_admin(message.chat.id) and not is_organizer(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    msg = bot.send_message(message.chat.id,
                           "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª CSV —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–æ–Ω–æ—Ä–æ–≤ (–§–ò–û;–¢–µ–ª–µ—Ñ–æ–Ω;–¢–∏–ø;–ì—Ä—É–ø–ø–∞;–°–æ–≥–ª–∞—Å–∏–µ;–í —Ä–µ–≥–∏—Å—Ç—Ä–µ –î–ö–ú)")
    bot.register_next_step_handler(msg, process_import_donors)


def process_import_donors(message):
    if not is_admin(message.chat.id) and not is_organizer(message.chat.id):
        return

    try:
        if message.document is None:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª CSV")
            return

        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        # –ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
        csv_data = downloaded_file.decode('utf-8').splitlines()
        csv_reader = csv.reader(csv_data, delimiter=';')

        imported_count = 0
        for row in csv_reader:
            if len(row) < 3:  # –ú–∏–Ω–∏–º—É–º –§–ò–û, –¢–µ–ª–µ—Ñ–æ–Ω, –¢–∏–ø
                continue

            name = row[0].strip()
            phone = row[1].strip()
            donor_type = row[2].strip().lower()
            group = row[3].strip() if len(row) > 3 else None
            consent = row[4].strip().lower() == '–¥–∞' if len(row) > 4 else False
            in_bm_registry = row[5].strip().lower() == '–¥–∞' if len(row) > 5 else False

            new_user = User(
                name=name,
                phone=phone,
                donor_type=donor_type,
                group=group,
                consent_given=consent,
                in_bm_registry=in_bm_registry,
                consent_date=datetime.date.today() if consent else None
            )

            session.add(new_user)
            imported_count += 1

        session.commit()
        bot.send_message(message.chat.id, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –¥–æ–Ω–æ—Ä–æ–≤!")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(func=lambda message: message.text == '–≠–∫—Å–ø–æ—Ä—Ç –¥–æ–Ω–æ—Ä–æ–≤')
def handle_export_donors(message):
    if not is_admin(message.chat.id) and not is_organizer(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    try:
        donors = session.query(User).all()

        # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        csv_output = StringIO()
        csv_writer = csv.writer(csv_output, delimiter=';')

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        csv_writer.writerow([
            'ID', '–§–ò–û', '–¢–µ–ª–µ—Ñ–æ–Ω', '–¢–∏–ø', '–ì—Ä—É–ø–ø–∞',
            '–°–æ–≥–ª–∞—Å–∏–µ', '–î–∞—Ç–∞ —Å–æ–≥–ª–∞—Å–∏—è', '–í —Ä–µ–≥–∏—Å—Ç—Ä–µ –î–ö–ú'
        ])

        # –î–∞–Ω–Ω—ã–µ
        for donor in donors:
            csv_writer.writerow([
                donor.id,
                donor.name,
                donor.phone,
                donor.donor_type,
                donor.group,
                '–î–∞' if donor.consent_given else '–ù–µ—Ç',
                donor.consent_date.strftime('%Y-%m-%d') if donor.consent_date else '',
                '–î–∞' if donor.in_bm_registry else '–ù–µ—Ç'
            ])

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
        csv_output.seek(0)
        bot.send_document(
            message.chat.id,
            ('donors.csv', csv_output.getvalue().encode('utf-8')))
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# ====================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø–ú–ò ======================
@bot.message_handler(func=lambda message: message.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏')
def handle_event_management(message):
    if not is_admin(message.chat.id) and not is_organizer(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    bot.send_message(message.chat.id, "üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏", reply_markup=get_event_management_keyboard())


@bot.message_handler(func=lambda message: message.text == '–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
def handle_create_event(message):
    if not is_admin(message.chat.id) and not is_organizer(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    msg = bot.send_message(message.chat.id,
                           "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–î–∞—Ç–∞(–ì–ì–ì–ì-–ú–ú-–î–î);–¶–µ–Ω—Ç—Ä –∫—Ä–æ–≤–∏;–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç")
    bot.register_next_step_handler(msg, process_create_event)


def process_create_event(message):
    if not is_admin(message.chat.id) and not is_organizer(message.chat.id):
        return

    try:
        data = message.text.split(';')
        date = datetime.datetime.strptime(data[0].strip(), '%Y-%m-%d').date()
        center = data[1].strip()
        slots = int(data[2].strip())

        new_event = Event(
            date=date,
            center=center,
            slots_available=slots,
            is_active=True
        )

        session.add(new_event)
        session.commit()

        bot.send_message(message.chat.id, f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ {date} –≤ {center} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(func=lambda message: message.text == '–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π')
def handle_list_events(message):
    if not is_admin(message.chat.id) and not is_organizer(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    events = session.query(Event).order_by(Event.date).all()

    if not events:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
        return

    response = "üìÖ –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:\n\n"
    for event in events:
        status = "–∞–∫—Ç–∏–≤–Ω–æ" if event.is_active else "–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ"
        response += f"üîπ {event.id}. {event.date} - {event.center} ({event.slots_available} –º–µ—Å—Ç, {status})\n"

    bot.send_message(message.chat.id, response)


# ====================== –û–¢–í–ï–¢–´ –ù–ê –í–û–ü–†–û–°–´ ======================
@bot.message_handler(func=lambda message: message.text == '–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã')
def handle_answer_questions(message):
    if not is_admin(message.chat.id) and not is_organizer(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    unanswered_questions = session.query(Question).filter_by(answered=False).all()

    if not unanswered_questions:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
        return

    keyboard = types.InlineKeyboardMarkup()
    for question in unanswered_questions:
        user = session.query(User).get(question.user_id)
        keyboard.add(types.InlineKeyboardButton(
            text=f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç {user.name if user else 'Unknown'}",
            callback_data=f"answer_question_{question.id}"
        ))

    bot.send_message(message.chat.id, "üì© –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞:", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('answer_question_'))
def handle_select_question(call):
    if not is_admin(call.message.chat.id) and not is_organizer(call.message.chat.id):
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    question_id = int(call.data.split('_')[-1])
    question = session.query(Question).get(question_id)

    if not question:
        bot.answer_callback_query(call.id, "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    user = session.query(User).get(question.user_id)
    msg_text = f"üì© –í–æ–ø—Ä–æ—Å –æ—Ç {user.name if user else 'Unknown'}:\n\n{question.text}"

    bot.send_message(call.message.chat.id, msg_text)
    bot.send_message(call.message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")

    bot.register_next_step_handler(call.message, lambda m: process_answer_question(m, question_id))


def process_answer_question(message, question_id):
    if not is_admin(message.chat.id) and not is_organizer(message.chat.id):
        return

    question = session.query(Question).get(question_id)
    if not question:
        bot.send_message(message.chat.id, "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    question.answer = message.text
    question.answered = True
    session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if question.user.chat_id:
        try:
            bot.send_message(question.user.chat_id, f"üì© –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{message.text}")
        except:
            pass

    bot.send_message(message.chat.id, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")


# ====================== –†–ê–°–°–´–õ–ö–ò ======================
@bot.message_handler(func=lambda message: message.text == '–†–∞—Å—Å—ã–ª–∫–∏')
def handle_mailing(message):
    if not is_admin(message.chat.id) and not is_organizer(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    bot.send_message(message.chat.id, "üì® –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=get_mailing_keyboard())


@bot.message_handler(func=lambda message: message.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
def handle_mailing_registered(message):
    if not is_admin(message.chat.id) and not is_organizer(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    msg = bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    bot.register_next_step_handler(msg, lambda m: process_mailing(m, 'registered'))


@bot.message_handler(func=lambda message: message.text == '–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏–º—Å—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
def handle_mailing_not_registered(message):
    if not is_admin(message.chat.id) and not is_organizer(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    msg = bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    bot.register_next_step_handler(msg, lambda m: process_mailing(m, 'not_registered'))


@bot.message_handler(func=lambda message: message.text == '–ù–µ –ø—Ä–∏—à–µ–¥—à–∏–º –Ω–∞ –ø–µ—Ä–≤—É—é –¥–∞—Ç—É')
def handle_mailing_no_show(message):
    if not is_admin(message.chat.id) and not is_organizer(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    msg = bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    bot.register_next_step_handler(msg, lambda m: process_mailing(m, 'no_show'))


@bot.message_handler(func=lambda message: message.text == '–í —Ä–µ–≥–∏—Å—Ç—Ä–µ –î–ö–ú')
def handle_mailing_bm_registry(message):
    if not is_admin(message.chat.id) and not is_organizer(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    msg = bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    bot.register_next_step_handler(msg, lambda m: process_mailing(m, 'bm_registry'))


def process_mailing(message, mailing_type):
    if not is_admin(message.chat.id) and not is_organizer(message.chat.id):
        return

    try:
        users = []

        if mailing_type == 'registered':
            # –ü–æ–ª—É—á–∞–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            next_event = session.query(Event).filter(Event.date >= datetime.date.today()).order_by(Event.date).first()
            if next_event:
                users = session.query(User).filter(User.registered_events.op('@>')([next_event.id])).all()

        elif mailing_type == 'not_registered':
            # –ü–æ–ª—É—á–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            next_events = session.query(Event).filter(Event.date >= datetime.date.today()).order_by(Event.date).all()
            if next_events:
                event_ids = [e.id for e in next_events]
                users = session.query(User).filter(~User.registered_events.op('&&')(event_ids)).all()

        elif mailing_type == 'no_show':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –Ω–æ –Ω–µ —Å–¥–∞–≤—à–∏–µ –∫—Ä–æ–≤—å
            first_event = session.query(Event).order_by(Event.date).first()
            if first_event:
                registered_users = session.query(User).filter(User.registered_events.op('@>')([first_event.id])).all()
                users = [u for u in registered_users if not any(d.date == first_event.date for d in u.donations)]

        elif mailing_type == 'bm_registry':
            users = session.query(User).filter_by(in_bm_registry=True).all()

        if not users:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return

        success = 0
        failed = 0

        for user in users:
            if user.chat_id:
                try:
                    bot.send_message(user.chat_id, message.text)
                    success += 1
                except:
                    failed += 1

        bot.send_message(message.chat.id, f"üì® –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# ====================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ======================
@bot.message_handler(func=lambda message: message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def handle_statistics(message):
    if not is_admin(message.chat.id) and not is_organizer(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    bot.send_message(message.chat.id, "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=get_statistics_keyboard())


@bot.message_handler(func=lambda message: message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º')
def handle_event_stats(message):
    if not is_admin(message.chat.id) and not is_organizer(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    events = session.query(Event).order_by(Event.date).all()

    if not events:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return

    response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º:\n\n"

    for event in events:
        registered = session.query(User).filter(User.registered_events.op('@>')([event.id])).count()
        donations = session.query(Donation).filter_by(date=event.date, center=event.center, successful=True).count()

        response += f"üìÖ {event.date} - {event.center}:\n"
        response += f"üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å: {registered}\n"
        response += f"ü©∏ –°–¥–∞–ª–∏ –∫—Ä–æ–≤—å: {donations}\n\n"

    bot.send_message(message.chat.id, response)


@bot.message_handler(func=lambda message: message.text == '–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
def handle_export_stats(message):
    if not is_admin(message.chat.id) and not is_organizer(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    try:
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
        events = session.query(Event).order_by(Event.date).all()

        # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        csv_output = StringIO()
        csv_writer = csv.writer(csv_output, delimiter=';')

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        csv_writer.writerow(['–î–∞—Ç–∞', '–¶–µ–Ω—Ç—Ä –∫—Ä–æ–≤–∏', '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å', '–°–¥–∞–ª–∏ –∫—Ä–æ–≤—å', '–ü—Ä–æ—Ü–µ–Ω—Ç —è–≤–∫–∏'])

        for event in events:
            registered = session.query(User).filter(User.registered_events.op('@>')([event.id])).count()
            donations = session.query(Donation).filter_by(date=event.date, center=event.center, successful=True).count()
            percent = (donations / registered * 100) if registered > 0 else 0

            csv_writer.writerow([
                event.date.strftime('%Y-%m-%d'),
                event.center,
                registered,
                donations,
                f"{percent:.1f}%"
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
        csv_writer.writerow([])
        csv_writer.writerow(['–î–æ–Ω–æ—Ä—ã'])
        csv_writer.writerow(['ID', '–§–ò–û', '–¢–µ–ª–µ—Ñ–æ–Ω', '–¢–∏–ø', '–ì—Ä—É–ø–ø–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–Ω–∞—Ü–∏–π', '–í —Ä–µ–≥–∏—Å—Ç—Ä–µ –î–ö–ú'])

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–Ω–æ—Ä–∞—Ö
        donors = session.query(User).all()
        for donor in donors:
            donation_count = len([d for d in donor.donations if d.successful])

            csv_writer.writerow([
                donor.id,
                donor.name,
                donor.phone,
                donor.donor_type,
                donor.group,
                donation_count,
                '–î–∞' if donor.in_bm_registry else '–ù–µ—Ç'
            ])

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
        csv_output.seek(0)
        bot.send_document(
            message.chat.id,
            ('statistics.csv', csv_output.getvalue().encode('utf-8')))
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# ====================== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò ======================
@bot.message_handler(func=lambda message: message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')
def handle_edit_info(message):
    if not is_admin(message.chat.id) and not is_organizer(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è'))
    keyboard.add(types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ'))
    keyboard.add(types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å FAQ'))
    keyboard.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))

    bot.send_message(message.chat.id, "‚úèÔ∏è –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è')
def handle_edit_welcome(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    msg = bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:")
    bot.register_next_step_handler(msg, lambda m: save_info(m, 'welcome'))


@bot.message_handler(func=lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ')
def handle_edit_donation_info(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    msg = bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ:")
    bot.register_next_step_handler(msg, lambda m: save_info(m, 'donation_info'))


@bot.message_handler(func=lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å FAQ')
def handle_edit_faq(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    msg = bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç FAQ:")
    bot.register_next_step_handler(msg, lambda m: save_info(m, 'faq'))


def save_info(message, info_type):
    if not is_admin(message.chat.id):
        return

    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —ç—Ç–∏ —Ç–µ–∫—Å—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    # –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
    bot.send_message(message.chat.id, f"‚úÖ –¢–µ–∫—Å—Ç {info_type} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")


# ====================== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –û –î–û–ù–ê–¶–ò–Ø–• ======================
@bot.message_handler(content_types=['document'])
def handle_document(message):
    if not is_admin(message.chat.id) and not is_organizer(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    try:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        # –ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
        csv_data = downloaded_file.decode('utf-8').splitlines()
        csv_reader = csv.reader(csv_data, delimiter=';')

        imported_count = 0
        for row in csv_reader:
            if len(row) < 3:  # –ú–∏–Ω–∏–º—É–º –§–ò–û, –î–∞—Ç–∞, –¶–µ–Ω—Ç—Ä
                continue

            name = row[0].strip()
            date_str = row[1].strip()
            center = row[2].strip()

            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –§–ò–û
            user = session.query(User).filter_by(name=name).first()
            if not user:
                continue

            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            try:
                date = datetime.datetime.strptime(date_str, '%Y-%m-%d').date()
            except:
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –¥–æ–Ω–∞—Ü–∏—è
            existing = session.query(Donation).filter_by(
                user_id=user.id,
                date=date,
                center=center
            ).first()

            if not existing:
                new_donation = Donation(
                    user_id=user.id,
                    date=date,
                    center=center,
                    successful=True
                )
                session.add(new_donation)
                imported_count += 1

        session.commit()
        bot.send_message(message.chat.id, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –¥–æ–Ω–∞—Ü–∏–π!")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)