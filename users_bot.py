import os
import re
import datetime
from typing import Optional
from dotenv import load_dotenv
import telebot
from telebot import types
from sqlalchemy import ForeignKey, JSON
from sqlalchemy.orm import declarative_base, relationship
from collections import defaultdict
from threading import Thread
from geopy.distance import geodesic
import logging
import colorama
from organizer_bot import *
import random
from MainWebAPP import DonorType

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
colorama.init()

# ====================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ======================
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = "8070241125:AAHqv4jo2AIRdjdkxXnm-c3uoghCG8S9vBI"
DATABASE_URL = 'sqlite:///C:/Users/–ò–≤–∞–Ω/PycharmProjects/abobych/donor.db'

# –°–ø–∏—Å–∫–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ADMIN_IDS = [-4983144611]  # ID —á–∞—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤
ORGANIZER_APPROVAL_CHAT_ID = -4938535692

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
Base = declarative_base()
engine = create_engine(DATABASE_URL, echo=False)
Session = sessionmaker(bind=engine)
session = Session()

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
message_cache = defaultdict(dict)


# ====================== –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ======================
class User(Base):
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, unique=True)
    phone = Column(String(20))
    name = Column(String(100))
    donor_type = Column(String(20))  # student, staff, external
    group = Column(String(20), nullable=True)
    consent_given = Column(Boolean, default=False)
    consent_date = Column(Date, nullable=True)
    in_bm_registry = Column(Boolean, default=False)
    registered_events = Column(JSON, default=[])

    donations = relationship("Donation", back_populates="user")
    questions = relationship("Question", back_populates="user")

class OrganizerRequest(Base):
    """–ú–æ–¥–µ–ª—å –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞"""
    __tablename__ = 'organizer_requests'

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'))
    status = Column(String(20), default='pending')  # pending, approved, rejected
    rejection_reason = Column(String(500), nullable=True)
    request_date = Column(Date, default=datetime.datetime.now)

    user = relationship("User")

class Donation(Base):
    """–ú–æ–¥–µ–ª—å –¥–æ–Ω–∞—Ü–∏–∏"""
    __tablename__ = 'donations'

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'))
    date = Column(Date)
    center = Column(String(100))
    successful = Column(Boolean, default=True)

    user = relationship("User", back_populates="donations")

class Event(Base):
    """–ú–æ–¥–µ–ª—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    __tablename__ = 'events'

    id = Column(Integer, primary_key=True)
    date = Column(Date)
    center = Column(String(100))
    slots_available = Column(Integer)
    is_active = Column(Boolean, default=True)

class Question(Base):
    """–ú–æ–¥–µ–ª—å –≤–æ–ø—Ä–æ—Å–∞"""
    __tablename__ = 'questions'

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'))
    text = Column(String(1000))
    answered = Column(Boolean, default=False)
    answer = Column(String(1000), nullable=True)
    timestamp = Column(Date, default=datetime.datetime.now)

    user = relationship("User", back_populates="questions")



# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
Base.metadata.create_all(engine)

# ====================== –ö–û–ù–°–¢–ê–ù–¢–´ ======================
DONOR_TYPES = ['student', 'staff', 'external']

BLOOD_CENTERS = [
    {
        'name': '–¶–ö –∏–º. –û.–ö. –ì–∞–≤—Ä–∏–ª–æ–≤–∞ (–ü–æ–ª–∏–∫–∞—Ä–ø–æ–≤–∞)',
        'address': '125284, –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü–æ–ª–∏–∫–∞—Ä–ø–æ–≤–∞, –¥. 14, –∫–æ—Ä–ø. 2',
        'coords': (55.778654, 37.549824)
    },
    {
        'name': '–¶–ö –∏–º. –û.–ö. –ì–∞–≤—Ä–∏–ª–æ–≤–∞ (–ë–∞–∫–∏–Ω—Å–∫–∞—è)',
        'address': '115516, –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ë–∞–∫–∏–Ω—Å–∫–∞—è, –¥. 31',
        'coords': (55.617139, 37.660258)
    },
    {
        'name': '–¶–ö –∏–º. –û.–ö. –ì–∞–≤—Ä–∏–ª–æ–≤–∞ (–®–∞–±–æ–ª–æ–≤–∫–∞)',
        'address': '115162, –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –®–∞–±–æ–ª–æ–≤–∫–∞, –¥. 57',
        'coords': (55.715839, 37.609223)
    },
    {
        'name': '–¶–µ–Ω—Ç—Ä –∫—Ä–æ–≤–∏ –§–ú–ë–ê –†–æ—Å—Å–∏–∏',
        'address': '–©—É–∫–∏–Ω—Å–∫–∞—è —É–ª–∏—Ü–∞, 6–∫2, –ú–æ—Å–∫–≤–∞, 123182',
        'coords': (55.810001, 37.479867)
    }
]


# ====================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ======================
def validate_name(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä—É—Å—Å–∫–æ–≥–æ –∏–º–µ–Ω–∏"""
    return bool(re.fullmatch(r'[–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+( [–ê-–Ø–Å][–∞-—è—ë]+)?', name))


def validate_group(group: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    return bool(re.fullmatch(r'[–ê-–Ø–∞-—èA-Za-z0-9-]+', group))


def format_user_info(user: User) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    info = f"üë§ <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
    info += f"‚ñ™ –§–ò–û: {user.name}\n"
    info += f"‚ñ™ –¢–∏–ø: {'—Å—Ç—É–¥–µ–Ω—Ç' if user.donor_type == 'student' else '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫' if user.donor_type == 'staff' else '–≤–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä'}\n"

    if user.donor_type == 'student' and user.group:
        info += f"‚ñ™ –ì—Ä—É–ø–ø–∞: {user.group}\n"

    donation_count = session.query(Donation).filter_by(user_id=user.id).count()
    info += f"‚ñ™ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–Ω–∞—Ü–∏–π: {donation_count}\n"

    last_donation = session.query(Donation).filter_by(user_id=user.id).order_by(Donation.date.desc()).first()
    if last_donation:
        info += f"‚ñ™ –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–Ω–∞—Ü–∏—è: {last_donation.date.strftime('%d.%m.%Y')} ({last_donation.center})\n"

    info += f"‚ñ™ –í —Ä–µ–≥–∏—Å—Ç—Ä–µ –î–ö–ú: {'–¥–∞' if user.in_bm_registry else '–Ω–µ—Ç'}\n"
    return info

# donor_type = DonorType.STUDENT if message.text == '–°—Ç—É–¥–µ–Ω—Ç' else DonorType.STAFF if message.text == '–°–æ—Ç—Ä—É–¥–Ω–∏–∫' else DonorType.EXTERNAL

def get_user_by_chat_id(chat_id: int) -> Optional[User]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id"""
    return session.query(User).filter_by(chat_id=chat_id).first()


def get_user_by_phone(phone: str) -> Optional[User]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    return session.query(User).filter_by(phone=phone).first()


def export_stats_to_csv():
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ CSV"""
    from csv import writer
    import io

    users = session.query(User).all()
    donations = session.query(Donation).all()
    events = session.query(Event).all()

    output = io.StringIO()
    csv_writer = writer(output)

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    csv_writer.writerow([
        'User ID', 'Name', 'Donor Type', 'Group',
        'Donation Count', 'In BM Registry', 'Last Donation Date'
    ])

    for user in users:
        last_donation = session.query(Donation) \
            .filter_by(user_id=user.id) \
            .order_by(Donation.date.desc()) \
            .first()

        last_donation_date = last_donation.date.strftime('%Y-%m-%d') if last_donation else ''

        csv_writer.writerow([
            user.id,
            user.name,
            user.donor_type,
            user.group or '',
            session.query(Donation).filter_by(user_id=user.id).count(),
            'Yes' if user.in_bm_registry else 'No',
            last_donation_date
        ])

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    csv_writer.writerow([])
    csv_writer.writerow(['Event ID', 'Date', 'Center', 'Slots Available', 'Is Active'])

    for event in events:
        csv_writer.writerow([
            event.id,
            event.date.strftime('%Y-%m-%d'),
            event.center,
            event.slots_available,
            'Yes' if event.is_active else 'No'
        ])

    output.seek(0)
    return output.getvalue()


def get_nearest_center(user_coords):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–ª–∏–∂–∞–π—à–∏–π —Ü–µ–Ω—Ç—Ä –¥–æ–Ω–æ—Ä—Å—Ç–≤–∞ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –Ω–µ–≥–æ"""
    nearest = None
    min_distance = float('inf')

    for center in BLOOD_CENTERS:
        distance = geodesic(user_coords, center['coords']).km
        if distance < min_distance:
            min_distance = distance
            nearest = center

    return nearest, min_distance


def get_osm_route_url(start_coords, end_coords):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ –≤ OpenStreetMap"""
    return (f"https://www.openstreetmap.org/directions?"
            f"engine=graphhopper_foot&route={start_coords[0]}%2C{start_coords[1]}%3B"
            f"{end_coords[0]}%2C{end_coords[1]}")


def get_static_map_url(center_coords, zoom=14):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    return (f"https://static-maps.yandex.ru/1.x/?ll={center_coords[1]},{center_coords[0]}"
            f"&z={zoom}&l=map&pt={center_coords[1]},{center_coords[0]},pm2dgl")


# ====================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ======================
def main_menu_keyboard(is_admin: bool = False, is_organizer: bool = False):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –î–Ω–∏ –î–æ–Ω–æ—Ä–∞')
    btn2 = types.KeyboardButton('ü©∏ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ –∫—Ä–æ–≤–∏')
    btn3 = types.KeyboardButton('ü¶¥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ –∫–æ—Å—Ç–Ω–æ–≥–æ –º–æ–∑–≥–∞')
    btn4 = types.KeyboardButton('‚Ñπ –û –¥–æ–Ω–∞—Ü–∏—è—Ö –≤ –ú–ò–§–ò')
    btn5 = types.KeyboardButton('üìù –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ')
    btn6 = types.KeyboardButton('‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º')
    btn7 = types.KeyboardButton('üìç –ë–ª–∏–∂–∞–π—à–∏–π —Ü–µ–Ω—Ç—Ä –¥–æ–Ω–æ—Ä—Å—Ç–≤–∞')
    btn8 = types.KeyboardButton('üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏')  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞

    keyboard.add(btn5, btn6)
    keyboard.add(btn1, btn7)
    keyboard.add(btn2, btn3)
    keyboard.add(btn4, btn8)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É

    if is_admin:
        keyboard.add(types.KeyboardButton('‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'))
    elif is_organizer:
        keyboard.add(types.KeyboardButton('‚öô –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ'))

    return keyboard


def admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        '‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ–Ω–æ—Ä–æ–≤',
        'üì© –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã',
        'üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É',
        '‚ûï –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
        'üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã',
        'üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ–Ω–∞—Ü–∏–π',
        'üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
        'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    ]
    for btn_text in buttons:
        keyboard.add(types.KeyboardButton(btn_text))
    return keyboard


# ====================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ======================
def ask_for_consent(chat_id: int):
    """–ó–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"""
    consent_text = (
        "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n"
        "1. –Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ü–µ–ª–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ–Ω–æ—Ä—Å–∫–∏—Ö –∞–∫—Ü–∏–π.\n"
        "2. –Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–æ–Ω–æ—Ä—Å–∫–∏–º–∏ –∞–∫—Ü–∏—è–º–∏.\n\n"
        "–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã?"
    )

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn1 = types.KeyboardButton('–î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω(–∞)')
    btn2 = types.KeyboardButton('–ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–∞)')
    btn3 = types.KeyboardButton('üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ')
    keyboard.add(btn1, btn2, btn3)

    bot.send_message(chat_id, consent_text, reply_markup=keyboard)


def show_upcoming_events(chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    events = session.query(Event).filter_by(is_active=True).order_by(Event.date).all()

    if not events:
        bot.send_message(chat_id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –î–Ω–µ–π –î–æ–Ω–æ—Ä–∞.")
        return

    text = "üìÖ <b>–ë–ª–∏–∂–∞–π—à–∏–µ –î–Ω–∏ –î–æ–Ω–æ—Ä–∞:</b>\n\n"
    for event in events:
        text += f"‚ñ™ <b>{event.date.strftime('%d.%m.%Y')}</b> - {event.center}\n"
        text += f"   –î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç: {event.slots_available}\n\n"

    text += "–•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ–¥–Ω–æ –∏–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π?"

    keyboard = types.InlineKeyboardMarkup()
    for event in events:
        keyboard.add(types.InlineKeyboardButton(
            text=f"{event.date.strftime('%d.%m.%Y')} - {event.center}",
            callback_data=f"register_{event.id}"
        ))

    bot.send_message(chat_id, text, reply_markup=keyboard, parse_mode='HTML')


def show_blood_info(chat_id: int):
    text = (
        "ü©∏ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ –∫—Ä–æ–≤–∏</b>\n\n"
        "<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–æ–Ω–æ—Ä–∞–º:</b>\n"
        "‚ñ™ –í–æ–∑—Ä–∞—Å—Ç: –ù–µ –º–µ–Ω–µ–µ 18 –ª–µ—Ç\n"
        "‚ñ™ –í–µ—Å: –ù–µ –º–µ–Ω–µ–µ 50 –∫–≥\n"
        "‚ñ™ –ó–¥–æ—Ä–æ–≤—å–µ:\n"
        "   - –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –≤ –æ—Å—Ç—Ä–æ–π —Ñ–∞–∑–µ\n"
        "   - –ù–µ –±–æ–ª–µ–ª–∏ –∞–Ω–≥–∏–Ω–æ–π, –û–†–í–ò, –≥—Ä–∏–ø–ø–æ–º –º–µ–Ω–µ–µ —á–µ–º –∑–∞ –º–µ—Å—è—Ü –¥–æ —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏\n"
        "   - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ª–∞ ‚â§ 37¬∞C\n"
        "   - –î–∞–≤–ª–µ–Ω–∏–µ: —Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ 90-160 –º–º —Ä—Ç.—Å—Ç., –¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ 60-100 –º–º —Ä—Ç.—Å—Ç.\n"
        "   - –ì–µ–º–æ–≥–ª–æ–±–∏–Ω: –∂–µ–Ω—â–∏–Ω—ã ‚â• 120 –≥/–ª, –º—É–∂—á–∏–Ω—ã ‚â• 130 –≥/–ª\n"
        "‚ñ™ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:\n"
        "   - –¶–µ–ª—å–Ω–∞—è –∫—Ä–æ–≤—å: –Ω–µ —á–∞—â–µ 4-5 —Ä–∞–∑ –≤ –≥–æ–¥ –¥–ª—è –º—É–∂—á–∏–Ω, 3-4 —Ä–∞–∑–∞ –¥–ª—è –∂–µ–Ω—â–∏–Ω\n\n"
        "<b>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–æ–Ω–∞—Ü–∏–∏ (–∑–∞ 2-3 –¥–Ω—è):</b>\n"
        "‚ñ™ –ü–∏—Ç–∞–Ω–∏–µ:\n"
        "   - –ò—Å–∫–ª—é—á–∏—Ç—å –∂–∏—Ä–Ω—É—é, –æ—Å—Ç—Ä—É—é, –∫–æ–ø—á–µ–Ω—É—é –ø–∏—â—É\n"
        "   - –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ñ–∞—Å—Ç—Ñ—É–¥–∞, –º–æ–ª–æ—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —è–π—Ü–∞–º–∏\n"
        "‚ñ™ –û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏:\n"
        "   - –û—Ç–∫–∞–∑ –æ—Ç –∞–ª–∫–æ–≥–æ–ª—è –∑–∞ 48 —á–∞—Å–æ–≤\n"
        "   - –ò–∑–±–µ–≥–∞—Ç—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫\n"
        "   - –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–∏–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ (–≤ —Ç.—á. –∞–Ω–∞–ª—å–≥–µ—Ç–∏–∫–æ–≤) –∑–∞ 72 —á–∞—Å–∞\n"
        "‚ñ™ –ù–∞–∫–∞–Ω—É–Ω–µ:\n"
        "   - –õ–µ–≥–∫–∏–π —É–∂–∏–Ω –¥–æ 20:00\n"
        "   - –°–æ–Ω –Ω–µ –º–µ–Ω–µ–µ 8 —á–∞—Å–æ–≤\n"
        "   - –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫ (–∫–∞—à–∞ –Ω–∞ –≤–æ–¥–µ, —Å–ª–∞–¥–∫–∏–π —á–∞–π, —Å—É—à–∫–∏, —Ö–ª–µ–± —Å –≤–∞—Ä–µ–Ω—å–µ–º)\n"
        "   - –ù–µ–ª—å–∑—è –∫—É—Ä–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –¥–æ —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏\n"
        "<b>–†–∞—Ü–∏–æ–Ω –¥–æ–Ω–æ—Ä–∞ –∑–∞ 2-3 –¥–Ω—è –¥–æ –¥–æ–Ω–∞—Ü–∏–∏</b>\n"
        "‚ñ™ –í–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º: 1.5‚Äì2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –≤ –¥–µ–Ω—å (—á–∏—Å—Ç–∞—è –≤–æ–¥–∞, –º–æ—Ä—Å—ã, –∫–æ–º–ø–æ—Ç—ã)\n"
        "‚ñ™ –û—Å–Ω–æ–≤–∞ —Ä–∞—Ü–∏–æ–Ω–∞:\n"
        "   - –ö—Ä—É–ø—ã –Ω–∞ –≤–æ–¥–µ\n"
        "   - –û—Ç–≤–∞—Ä–Ω–æ–µ –Ω–µ–∂–∏—Ä–Ω–æ–µ –º—è—Å–æ (–≥–æ–≤—è–¥–∏–Ω–∞, –∏–Ω–¥–µ–π–∫–∞, –∫—É—Ä–∏—Ü–∞)\n"
        "   - –ë–µ–ª–∞—è –Ω–µ–∂–∏—Ä–Ω–∞—è —Ä—ã–±–∞ (—Ç—Ä–µ—Å–∫–∞, —Ö–µ–∫)\n"
        "   - –û–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã\n"
        "‚ñ™ –ó–∞–ø—Ä–µ—â–µ–Ω–æ:\n"
        "   - –ñ–∏—Ä–Ω–æ–µ –º—è—Å–æ (—Å–≤–∏–Ω–∏–Ω–∞, –±–∞—Ä–∞–Ω–∏–Ω–∞)\n"
        "   - –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (—Å—ã—Ä, —Å–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ, –π–æ–≥—É—Ä—Ç—ã)\n"
        "   - –Ø–π—Ü–∞ –∏ –æ—Ä–µ—Ö–∏\n"
        "   - –§–∞—Å—Ç—Ñ—É–¥, –∫–æ–ø—á–µ–Ω–æ—Å—Ç–∏, –º–∞–π–æ–Ω–µ–∑\n"
        "   - –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏: —Ü–∏—Ç—Ä—É—Å–æ–≤—ã–µ, –±–∞–Ω–∞–Ω—ã, –∫–∏–≤–∏, –∫–ª—É–±–Ω–∏–∫–∞/–º–∞–ª–∏–Ω–∞, –∞–≤–æ–∫–∞–¥–æ,"
        " –≤–∏–Ω–æ–≥—Ä–∞–¥, –≤—Å–µ —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—Ä—É–∫—Ç—ã, —Å–≤–µ–∫–ª–∞, —à–ø–∏–Ω–∞—Ç.\n"
        "<b>–ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è</b>\n"
        "‚ñ™ –ò–Ω—Ñ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ:\n"
        "   - –í–ò–ß/–°–ü–ò–î\n"
        "   - –°–∏—Ñ–∏–ª–∏—Å\n"
        "   - –í–∏—Ä—É—Å–Ω—ã–µ –≥–µ–ø–∞—Ç–∏—Ç—ã (B, C)\n"
        "   - –¢—É–±–µ—Ä–∫—É–ª–µ–∑\n"
        "‚ñ™ –ü–∞—Ä–∞–∑–∏—Ç–∞—Ä–Ω—ã–µ:\n"
        "   - –¢–æ–∫—Å–æ–ø–ª–∞–∑–º–æ–∑\n"
        "   - –õ–µ–π—à–º–∞–Ω–∏–æ–∑\n"
        "   - –û–Ω–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è\n"
        "   - –ë–æ–ª–µ–∑–Ω–∏ –∫—Ä–æ–≤–∏\n"
        "‚ñ™ –°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–µ:\n"
        "   - –ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è II-III —Å—Ç\n"
        "   - –ò—à–µ–º–∏—á–µ—Å–∫–∞—è –±–æ–ª–µ–∑–Ω—å\n"
        "   - –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –¶–ù–°\n"
        "   - –ë—Ä–æ–Ω—Ö–∏–∞–ª—å–Ω–∞—è –∞—Å—Ç–º–∞\n"
        "<b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è</b>\n"
        "‚ñ™ –ü–æ—Å–ª–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π:\n"
        "   - –û–†–í–ò, –≥—Ä–∏–ø–ø - 1 –º–µ—Å—è—Ü\n"
        "   - –ê–Ω–≥–∏–Ω–∞ - 1 –º–µ—Å—è—Ü\n"
        "   - –ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è + 5 –¥–Ω–µ–π –ø–æ—Å–ª–µ\n"
        "‚ñ™ –ü–æ—Å–ª–µ –ø—Ä–æ—Ü–µ–¥—É—Ä::\n"
        "   - –¢–∞—Ç—É–∏—Ä–æ–≤–∫–∏/–ø–∏—Ä—Å–∏–Ω–≥ - 4-12 –º–µ—Å—è—Ü–µ–≤\n"
        "   - –≠–Ω–¥–æ—Å–∫–æ–ø–∏—è - 4-6 –º–µ—Å—è—Ü–µ–≤\n"
        "   - –ü—Ä–∏–≤–∏–≤–∫–∏ (–∂–∏–≤—ã–µ –≤–∞–∫—Ü–∏–Ω—ã)\n"
        "‚ñ™ –õ–µ–∫–∞—Ä—Å—Ç–≤–∞:\n"
        "   - –ê–Ω—Ç–∏–±–∏–æ—Ç–∏–∫–∏ - 2 –Ω–µ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –∫—É—Ä—Å–∞\n"
        "   - –ê–Ω–∞–ª—å–≥–µ—Ç–∏–∫–∏ - 3 –¥–Ω—è –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∞\n"
    )

    bot.send_message(chat_id, text, parse_mode='HTML')



def show_bone_marrow_info(chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ –∫–æ—Å—Ç–Ω–æ–≥–æ –º–æ–∑–≥–∞"""
    text = (
        "ü¶¥ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ –∫–æ—Å—Ç–Ω–æ–≥–æ –º–æ–∑–≥–∞</b>\n\n"
        "<b>–í–∞–∂–Ω–æ—Å—Ç—å –¥–æ–Ω–æ—Ä—Å—Ç–≤–∞:</b>\n"
        "–ï–∂–µ–≥–æ–¥–Ω–æ –≤ –†–æ—Å—Å–∏–∏ –±–æ–ª–µ–µ 5 000 —á–µ–ª–æ–≤–µ–∫ –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ —Ç—Ä–∞–Ω—Å–ø–ª–∞–Ω—Ç–∞—Ü–∏–∏ –∫–æ—Å—Ç–Ω–æ–≥–æ –º–æ–∑–≥–∞.\n\n"
        "<b>–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Ä–µ–≥–∏—Å—Ç—Ä:</b>\n"
        "1. –ü–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ (–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã)\n"
        "2. –ó–∞–±–æ—Ä –±–∏–æ–º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ –∏–ª–∏ –º–∞–∑–æ–∫ —Å —â–µ–∫–∏)\n"
        "3. –¢–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ (–≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑)\n"
        "4. –û–∂–∏–¥–∞–Ω–∏–µ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-10 –ª–µ—Ç)\n\n"
        "<b>–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–æ–Ω–∞—Ü–∏–∏:</b>\n"
        "‚ñ™ –ü–µ—Ä–∏—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–π –∑–∞–±–æ—Ä —Å—Ç–≤–æ–ª–æ–≤—ã—Ö –∫–ª–µ—Ç–æ–∫ (80% —Å–ª—É—á–∞–µ–≤)\n"
        "‚ñ™ –ü—É–Ω–∫—Ü–∏—è –∫–æ—Å—Ç–Ω–æ–≥–æ –º–æ–∑–≥–∞ (20% —Å–ª—É—á–∞–µ–≤)"
    )
    bot.send_message(chat_id, text, parse_mode='HTML')


def show_mephi_donation_info(chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–Ω–∞—Ü–∏—è—Ö –≤ –ú–ò–§–ò"""
    text = (
        "‚Ñπ <b>–û –¥–æ–Ω–∞—Ü–∏—è—Ö –≤ –ú–ò–§–ò</b>\n\n"
        "<b>–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏ –≤ –ú–ò–§–ò:</b>\n"
        "1. –ü—Ä–∏–±—ã—Ç–∏–µ –≤ –ú–ò–§–ò (–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –æ—Ñ–∏—Å)\n"
        "2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:\n"
        "   - –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        "   - –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        "   - –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞—Ö–∏–ª\n"
        "3. –ú–µ–¥–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ:\n"
        "   - –ò–∑–º–µ—Ä–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è –∏ –ø—É–ª—å—Å–∞\n"
        "   - –≠–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏\n"
        "4. –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –∑–∞–±–æ—Ä–∞ –∫—Ä–æ–≤–∏ (10-15 –º–∏–Ω—É—Ç)\n"
        "5. –û—Ç–¥—ã—Ö –∏ –ø–∏—Ç–∞–Ω–∏–µ –ø–æ—Å–ª–µ –¥–æ–Ω–∞—Ü–∏–∏\n"
        "6. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ–∫"
    )
    bot.send_message(chat_id, text, parse_mode='HTML')


def show_user_data(chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = get_user_by_chat_id(chat_id)
    if not user:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        return

    text = format_user_info(user)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ–Ω–∞—Ü–∏–π
    donations = session.query(Donation).filter_by(user_id=user.id).order_by(Donation.date.desc()).all()
    if donations:
        text += "\n\n<b>–ò—Å—Ç–æ—Ä–∏—è –¥–æ–Ω–∞—Ü–∏–π:</b>\n"
        for donation in donations:
            status = "‚úÖ" if donation.successful else "‚ùå"
            text += f"‚ñ™ {status} {donation.date.strftime('%d.%m.%Y')} - {donation.center}\n"

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_user_data"),
        types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_account_confirm")
    )

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        if f"last_msg_{chat_id}" in message_cache:
            bot.delete_message(chat_id, message_id=message_cache[f"last_msg_{chat_id}"])
    except:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    msg = bot.send_message(chat_id, text, reply_markup=keyboard, parse_mode='HTML')
    message_cache[f"last_msg_{chat_id}"] = msg.message_id


@bot.message_handler(func=lambda message: message.text == 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏')
def handle_my_applications(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –∑–∞—è–≤–∫–∏'"""
    chat_id = message.chat.id
    user = get_user_by_chat_id(chat_id)

    if not user:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        return

    show_user_applications(chat_id, user)


def show_user_applications(chat_id: int, user: User, page: int = 0, history: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    today = datetime.date.today()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    registered_events = user.registered_events or []

    if not registered_events:
        if history:
            text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."
        else:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."

        keyboard = types.InlineKeyboardMarkup()
        if history:
            keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞—è–≤–∫–∞–º", callback_data="applications_back"))
        else:
            keyboard.add(types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", callback_data="applications_history"))

        bot.send_message(chat_id, text, reply_markup=keyboard)
        return

    if history:
        # –í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        events = session.query(Event).filter(
            Event.id.in_(registered_events)
        ).order_by(Event.date.desc()).all()
    else:
        # –¢–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        events = session.query(Event).filter(
            Event.id.in_(registered_events),
            Event.date >= today
        ).order_by(Event.date.asc()).all()

    if not events:
        if history:
            text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."
        else:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."

        keyboard = types.InlineKeyboardMarkup()
        if history:
            keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞—è–≤–∫–∞–º", callback_data="applications_back"))
        else:
            keyboard.add(types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", callback_data="applications_history"))

        bot.send_message(chat_id, text, reply_markup=keyboard)
        return

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 10 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    pages = [events[i:i + 10] for i in range(0, len(events), 10)]
    current_page = pages[page] if page < len(pages) else pages[-1]

    if history:
        text = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π</b>\n\n"
    else:
        text = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏</b>\n\n"

    for event in current_page:
        status = "‚úÖ" if event.date >= today else "‚åõ"
        text += f"{status} <b>{event.date.strftime('%d.%m.%Y')}</b> - {event.center}\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.InlineKeyboardMarkup()

    if len(pages) > 1:
        row = []
        if page > 0:
            row.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"applications_page_{page - 1}_{int(history)}"))
        if page < len(pages) - 1:
            row.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"applications_page_{page + 1}_{int(history)}"))
        keyboard.row(*row)

    if history:
        keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞—è–≤–∫–∞–º", callback_data="applications_back"))
    else:
        keyboard.add(types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", callback_data="applications_history"))

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        if f"last_applications_msg_{chat_id}" in message_cache:
            bot.delete_message(chat_id, message_cache[f"last_applications_msg_{chat_id}"])
    except:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = bot.send_message(chat_id, text, parse_mode='HTML', reply_markup=keyboard)
    message_cache[f"last_applications_msg_{chat_id}"] = msg.message_id


@bot.callback_query_handler(func=lambda call: call.data.startswith('applications_page_'))
def handle_applications_page(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü"""
    chat_id = call.message.chat.id
    user = get_user_by_chat_id(chat_id)

    if not user:
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    parts = call.data.split('_')
    page = int(parts[2])
    history = bool(int(parts[3]))

    show_user_applications(chat_id, user, page, history)
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data == 'applications_history')
def handle_applications_history(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò—Å—Ç–æ—Ä–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π'"""
    chat_id = call.message.chat.id
    user = get_user_by_chat_id(chat_id)

    if not user:
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    show_user_applications(chat_id, user, history=True)
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data == 'applications_back')
def handle_applications_back(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞—è–≤–∫–∞–º'"""
    chat_id = call.message.chat.id
    user = get_user_by_chat_id(chat_id)

    if not user:
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    show_user_applications(chat_id, user)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'delete_account_confirm')
def handle_delete_account_confirm(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ (–ø–µ—Ä–≤—ã–π —à–∞–≥)"""
    chat_id = call.message.chat.id

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏—Ö
    buttons = [
        types.InlineKeyboardButton("–î–∞, —è —Ö–æ—á—É —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_account_step2"),
        types.InlineKeyboardButton("–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª", callback_data="back_to_profile"),
        types.InlineKeyboardButton("–ù–µ—Ç, –ø—É—Å—Ç—å –±—É–¥–µ—Ç", callback_data="back_to_profile"),
    ]
    random.shuffle(buttons)

    keyboard = types.InlineKeyboardMarkup()
    for btn in buttons:
        keyboard.add(btn)

    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile"))

    try:
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text="‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?</b>\n\n"
                 "–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(
            chat_id,
            "‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?</b>\n\n"
            "–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
            reply_markup=keyboard,
            parse_mode='HTML'
        )


@bot.callback_query_handler(func=lambda call: call.data == 'delete_account_step2')
def handle_delete_account_step2(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ (–≤—Ç–æ—Ä–æ–π —à–∞–≥)"""
    chat_id = call.message.chat.id

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏—Ö (–∫—Ä–æ–º–µ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥)
    buttons = [
        types.InlineKeyboardButton("–î–∞, —Ç–æ—á–Ω–æ —Ö–æ—á—É —É–¥–∞–ª–∏—Ç—å", callback_data="delete_account_final"),
        types.InlineKeyboardButton("–ù–µ—Ç, –ø–µ—Ä–µ–¥—É–º–∞–ª", callback_data="back_to_profile"),
        types.InlineKeyboardButton("–ù–µ—Ç, –æ—Å—Ç–∞–≤–ª—é", callback_data="back_to_profile")
    ]
    random.shuffle(buttons)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = types.InlineKeyboardMarkup()
    for btn in buttons:
        keyboard.add(btn)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–Ω—É—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∫–æ–Ω—Ü–µ
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile"))
    try:
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text="‚ùå <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!</b>\n\n"
                 "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ? "
                 "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(
            chat_id,
            "‚ùå <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!</b>\n\n"
            "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ? "
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=keyboard,
            parse_mode='HTML'
        )


@bot.callback_query_handler(func=lambda call: call.data == 'delete_account_final')
def handle_delete_account_final(call):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    chat_id = call.message.chat.id
    user = get_user_by_chat_id(chat_id)

    if not user:
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # 1. –£–¥–∞–ª—è–µ–º –¥–æ–Ω–∞—Ü–∏–∏
        session.query(Donation).filter_by(user_id=user.id).delete()

        # 2. –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
        session.query(Question).filter_by(user_id=user.id).delete()

        # 3. –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
        session.query(OrganizerRequest).filter_by(user_id=user.id).delete()

        # 4. –£–¥–∞–ª—è–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        from organizer_bot import Organizer
        session.query(Organizer).filter_by(user_id=user.id).delete()

        # 5. –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session.delete(user)
        session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        bot.send_message(
            chat_id,
            "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.\n\n"
            "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )

        # –í—ã–∑—ã–≤–∞–µ–º /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        start(call.message)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        show_user_data(chat_id)


def show_admin_panel(chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if chat_id not in ADMIN_IDS:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return

    bot.send_message(chat_id, "‚öô <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>",
                     reply_markup=admin_keyboard(), parse_mode='HTML')


def show_admin_stats(chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    if chat_id not in ADMIN_IDS:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return

    total_donors = session.query(User).count()
    active_donors = session.query(User).join(Donation).distinct(User.id).count()
    upcoming_events = session.query(Event).filter_by(is_active=True).count()
    unanswered_questions = session.query(Question).filter_by(answered=False).count()

    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"‚ñ™ –í—Å–µ–≥–æ –¥–æ–Ω–æ—Ä–æ–≤: {total_donors}\n"
        f"‚ñ™ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–Ω–æ—Ä–æ–≤: {active_donors}\n"
        f"‚ñ™ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {upcoming_events}\n"
        f"‚ñ™ –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {unanswered_questions}"
    )

    bot.send_message(chat_id, text, parse_mode='HTML')


def register_for_event(chat_id: int, event_id: int):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"""
    user = get_user_by_chat_id(chat_id)
    if not user:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        return

    event = session.query(Event).get(event_id)
    if not event:
        bot.send_message(chat_id, "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –¥—Ä—É–≥–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ —ç—Ç—É –¥–∞—Ç—É
    existing_registrations = session.query(Event).filter(
        Event.id.in_(user.registered_events or []),
        Event.date == event.date
    ).all()

    if existing_registrations:
        conflict_event = existing_registrations[0]
        bot.send_message(
            chat_id,
            f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {conflict_event.date.strftime('%d.%m.%Y')} "
            f"({conflict_event.center}). –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –¥–≤–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –æ–¥–∏–Ω –¥–µ–Ω—å."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    if event_id in (user.registered_events or []):
        bot.send_message(chat_id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user.registered_events:
        user.registered_events = []
    print(*user.registered_events, 'old')
    event.slots_available -= 1
    user.registered_events.append(event_id)

    from sqlalchemy.orm.attributes import flag_modified
    flag_modified(user, "registered_events")

    print(*user.registered_events, 'new')
    session.commit()

    # –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö –¥–æ–Ω–æ—Ä–æ–≤ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    if user.donor_type == 'external':
        text = (
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {event.date.strftime('%d.%m.%Y')} ({event.center}).\n\n"
            "–ö–∞–∫ –≤–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä, –≤–∞–º —Ç–∞–∫–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å—Å—ã–ª–∫–µ:\n"
            "https://it.mephi.ru/donor-registration"
        )
    else:
        text = f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {event.date.strftime('%d.%m.%Y')} ({event.center})."

    bot.send_message(chat_id, text)


def answer_question(admin_chat_id: int, question_id: int):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    question = session.query(Question).get(question_id)
    if not question:
        bot.send_message(admin_chat_id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    bot.send_message(admin_chat_id,
                     f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (ID: {question.id}):\n{question.text}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
                     reply_markup=types.ForceReply(selective=True))


def export_stats(chat_id: int):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ CSV"""
    if chat_id not in ADMIN_IDS:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return

    try:
        csv_data = export_stats_to_csv()

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open('donor_stats.csv', 'w', encoding='utf-8') as f:
            f.write(csv_data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open('donor_stats.csv', 'rb') as f:
            bot.send_document(chat_id, f, caption='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–Ω–æ—Ä–æ–≤')

    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


# ====================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ======================
@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    chat_id = message.chat.id
    user = get_user_by_chat_id(chat_id)

    if user:
        greeting = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.name.split()[1]}!\n\n"
        greeting += "–≠—Ç–æ –±–æ—Ç –î–Ω—è –î–æ–Ω–æ—Ä–∞ –ù–ò–Ø–£ –ú–ò–§–ò. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –¥–æ–Ω–æ—Ä—Å–∫—É—é –∞–∫—Ü–∏—é, —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é –¥–æ–Ω–∞—Ü–∏–π."

        from organizer_bot import is_organizer
        is_org = is_organizer(chat_id)
        bot.send_message(chat_id, greeting,
                        reply_markup=main_menu_keyboard(is_admin=(chat_id in ADMIN_IDS),
                                                      is_organizer=is_org))
    else:
        greeting = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –î–Ω—è –î–æ–Ω–æ—Ä–∞ –ù–ò–Ø–£ –ú–ò–§–ò!\n\n"
        greeting += "–ù–∞—à–∞ —Ü–µ–ª—å - —É–ø—Ä–æ—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –¥–æ–Ω–æ—Ä—Å–∫–∏–µ –∞–∫—Ü–∏–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ –∫—Ä–æ–≤–∏ –∏ –∫–æ—Å—Ç–Ω–æ–≥–æ –º–æ–∑–≥–∞.\n\n"
        greeting += "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞."

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(types.KeyboardButton('üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True))

        bot.send_message(chat_id, greeting, reply_markup=keyboard)


@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    chat_id = message.chat.id
    phone_number = message.contact.phone_number

    user = get_user_by_phone(phone_number)

    if user:
        # –û–±–Ω–æ–≤–ª—è–µ–º chat_id –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–µ–Ω–∏–ª —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        if user.chat_id != chat_id:
            user.chat_id = chat_id
            session.commit()

        bot.send_message(chat_id,
                         f"–ú—ã –Ω–∞—à–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n{format_user_info(user)}\n\n–≠—Ç–æ –≤—ã?",
                         reply_markup=types.ForceReply(selective=True))
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        new_user = User(chat_id=chat_id, phone=phone_number)
        session.add(new_user)
        session.commit()

        bot.send_message(chat_id,
                         "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):",
                         reply_markup=types.ForceReply(selective=True))


@bot.message_handler(func=lambda message: message.reply_to_message and
                                          '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û' in message.reply_to_message.text)
@bot.message_handler(func=lambda message: message.reply_to_message and
                                          '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û' in message.reply_to_message.text)
def handle_name(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û"""
    chat_id = message.chat.id
    name = message.text.strip()

    if not validate_name(name):
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):",
                         reply_markup=types.ForceReply(selective=True))
        return

    user = get_user_by_chat_id(chat_id)
    if user:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –∫—ç—à–µ
        message_cache[f"temp_name_{chat_id}"] = name

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, –≤–µ—Ä–Ω–æ", callback_data=f"confirm_name_yes_{chat_id}"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å", callback_data=f"confirm_name_no_{chat_id}")
        )

        bot.send_message(chat_id, f"–í—ã —É–∫–∞–∑–∞–ª–∏ –§–ò–û: <b>{name}</b>\n\n–≠—Ç–æ –≤–µ—Ä–Ω–æ?",
                         reply_markup=keyboard, parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_name_'))
def handle_name_confirmation(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –§–ò–û —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    chat_id = call.message.chat.id
    action = call.data.split('_')[2]
    user_chat_id = int(call.data.split('_')[3]) if len(call.data.split('_')) > 3 else chat_id

    if action == 'no':
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.delete_message(chat_id, call.message.message_id)
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û —Å–Ω–æ–≤–∞
        bot.send_message(user_chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –µ—â–µ —Ä–∞–∑:",
                         reply_markup=types.ForceReply(selective=True))
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞
    user = get_user_by_chat_id(user_chat_id)
    if user:
        user.name = message_cache[f"temp_name_{user_chat_id}"]
        session.commit()
        del message_cache[f"temp_name_{user_chat_id}"]  # –û—á–∏—â–∞–µ–º –∫—ç—à

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.delete_message(chat_id, call.message.message_id)

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –¥–æ–Ω–æ—Ä–∞
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(
            types.KeyboardButton('–°—Ç—É–¥–µ–Ω—Ç'),
            types.KeyboardButton('–°–æ—Ç—Ä—É–¥–Ω–∏–∫'),
            types.KeyboardButton('–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä')
        )
        bot.send_message(user_chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å:", reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text in ['–°—Ç—É–¥–µ–Ω—Ç', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫', '–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä'])
def handle_donor_type(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–Ω–æ—Ä–∞"""
    chat_id = message.chat.id
    donor_type = 'student' if message.text == '–°—Ç—É–¥–µ–Ω—Ç' else 'staff' if message.text == '–°–æ—Ç—Ä—É–¥–Ω–∏–∫' else 'external'

    user = get_user_by_chat_id(chat_id)
    if user:
        user.donor_type = donor_type
        session.commit()

        if donor_type == 'student':
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã:",
                             reply_markup=types.ForceReply(selective=True))
        elif donor_type == 'staff':
            ask_for_consent(chat_id)
        else:
            # –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö –¥–æ–Ω–æ—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            keyboard.add(types.KeyboardButton('–Ø –ø—Ä–æ—à–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'))

            bot.send_message(
                chat_id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ:\n"
                "https://donor.blood.ru/news/den-donora-v-niyau-mifi/\n\n"
                "–ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=keyboard
            )


@bot.message_handler(func=lambda message: message.text == '–Ø –ø—Ä–æ—à–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
def handle_external_registration_complete(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ–Ω–æ—Ä–∞"""
    chat_id = message.chat.id
    user = get_user_by_chat_id(chat_id)

    if user and user.donor_type == 'external':
        ask_for_consent(chat_id)
    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /start")

@bot.message_handler(func=lambda message: message.reply_to_message and
                                          '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã' in message.reply_to_message.text)
def handle_group(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã"""
    chat_id = message.chat.id
    group = message.text.strip()

    if not validate_group(group):
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:",
                         reply_markup=types.ForceReply(selective=True))
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –∫—ç—à–µ
    message_cache[f"temp_group_{chat_id}"] = group

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("‚úÖ –î–∞, –≤–µ—Ä–Ω–æ", callback_data=f"confirm_group_yes_{chat_id}"),
        types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å", callback_data=f"confirm_group_no_{chat_id}")
    )

    bot.send_message(chat_id, f"–í—ã —É–∫–∞–∑–∞–ª–∏ –≥—Ä—É–ø–ø—É: <b>{group}</b>\n\n–≠—Ç–æ –≤–µ—Ä–Ω–æ?",
                     reply_markup=keyboard, parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_group_'))
def handle_group_confirmation(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    chat_id = call.message.chat.id
    action = call.data.split('_')[2]
    user_chat_id = int(call.data.split('_')[3]) if len(call.data.split('_')) > 3 else chat_id

    if action == 'no':
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.delete_message(chat_id, call.message.message_id)
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—É —Å–Ω–æ–≤–∞
        bot.send_message(user_chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã –µ—â–µ —Ä–∞–∑:",
                         reply_markup=types.ForceReply(selective=True))
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–≥–ª–∞—Å–∏—é
    user = get_user_by_chat_id(user_chat_id)
    if user:
        user.group = message_cache[f"temp_group_{user_chat_id}"]
        session.commit()
        del message_cache[f"temp_group_{user_chat_id}"]  # –û—á–∏—â–∞–µ–º –∫—ç—à

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.delete_message(chat_id, call.message.message_id)

        ask_for_consent(user_chat_id)


@bot.message_handler(func=lambda message: message.text == 'üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ')
def show_agreement(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ"""
    try:
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
        agreement_path = os.path.join('documents', 'soglas.pdf')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(agreement_path):
            raise FileNotFoundError(f"–§–∞–π–ª —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {agreement_path}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–∞–π–ª
        bot.send_message(
            message.chat.id,
            "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:"
        )

        with open(agreement_path, 'rb') as doc:
            bot.send_document(
                message.chat.id,
                doc,
                caption='–ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
            )

    except FileNotFoundError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è: {e}")
        bot.send_message(
            message.chat.id,
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–∞–π–ª —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è: {e}")
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


@bot.message_handler(func=lambda message: message.text in ['–î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω(–∞)', '–ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–∞)'])
def handle_consent(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"""
    chat_id = message.chat.id

    if message.text == '–ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–∞)':
        bot.send_message(chat_id, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
        ask_for_consent(chat_id)
        return

    user = get_user_by_chat_id(chat_id)
    if user:
        user.consent_given = True
        user.consent_date = datetime.datetime.now()
        session.commit()

        # –î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
        if user.donor_type == 'staff':
            send_organizer_request(user)
        else:
            bot.send_message(chat_id,
                             "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
                             reply_markup=main_menu_keyboard(is_admin=(chat_id in ADMIN_IDS)))


def send_organizer_request(user):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏
    existing_request = session.query(OrganizerRequest).filter_by(user_id=user.id, status='pending').first()
    if existing_request:
        bot.send_message(user.chat_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.")
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
    new_request = OrganizerRequest(
        user_id=user.id,
        status='pending',
        request_date=datetime.datetime.now()
    )
    session.add(new_request)
    session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_org_{new_request.id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_org_{new_request.id}")
    )

    bot.send_message(
        ORGANIZER_APPROVAL_CHAT_ID,
        f"üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞:\n\n"
        f"ID: {new_request.id}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
        f"–î–∞—Ç–∞: {new_request.request_date.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è",
        reply_markup=keyboard
    )

    bot.send_message(
        user.chat_id,
        "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ–Ω–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.\n\n"
        "–ü–æ–∫–∞ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.",
        reply_markup=main_menu_keyboard()
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('approve_org_'))
def handle_approve_organizer(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞"""
    request_id = int(call.data.split('_')[2])
    request = session.query(OrganizerRequest).get(request_id)

    if not request:
        bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    if request.status != 'pending':
        bot.answer_callback_query(call.id, f"–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (—Å—Ç–∞—Ç—É—Å: {request.status})")
        return

    user = session.query(User).get(request.user_id)
    if not user:
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    from organizer_bot import register_organizer
    register_organizer(user.chat_id, user)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    request.status = 'approved'
    session.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(
        user.chat_id,
        "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏."
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üìã –ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞:\n\n"
                 f"ID: {request.id}\n"
                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name}\n"
                 f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
                 f"–î–∞—Ç–∞: {request.request_date.strftime('%d.%m.%Y %H:%M')}\n\n"
                 f"–°—Ç–∞—Ç—É—Å: ‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞",
            reply_markup=None
        )
    except:
        pass

    bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞")


@bot.callback_query_handler(func=lambda call: call.data.startswith('reject_org_'))
def handle_reject_organizer(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞"""
    request_id = int(call.data.split('_')[2])
    request = session.query(OrganizerRequest).get(request_id)

    if not request:
        bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    if request.status != 'pending':
        bot.answer_callback_query(call.id, f"–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (—Å—Ç–∞—Ç—É—Å: {request.status})")
        return

    user = session.query(User).get(request.user_id)
    if not user:
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞
    msg = bot.send_message(
        call.message.chat.id,
        f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ ID {request_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}:",
        reply_markup=types.ForceReply(selective=True)
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
    message_cache[f"reject_reason_{request_id}"] = msg.message_id

    bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞")


@bot.message_handler(func=lambda message: message.reply_to_message and
                                          '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –¥–ª—è –∑–∞—è–≤–∫–∏' in message.reply_to_message.text)
@bot.message_handler(func=lambda message: message.reply_to_message and
                                      '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –¥–ª—è –∑–∞—è–≤–∫–∏' in message.reply_to_message.text)
def handle_rejection_reason(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞"""
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    request_id = int(message.reply_to_message.text.split('ID ')[1].split(' ')[0])
    reason = message.text.strip()

    if not reason:
        bot.send_message(message.chat.id, "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    request = session.query(OrganizerRequest).get(request_id)
    if not request:
        bot.send_message(message.chat.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    user = session.query(User).get(request.user_id)
    if not user:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
    organizer = session.query(Organizer).filter_by(user_id=user.id).first()
    if organizer:
        session.delete(organizer)
        session.commit()

    # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session.delete(user)
    session.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
    request.status = 'rejected'
    request.rejection_reason = reason
    session.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        bot.send_message(
            user.chat_id,
            f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    try:
        bot.edit_message_text(
            chat_id=message.reply_to_message.chat.id,
            message_id=message.reply_to_message.message_id,
            text=f"üìã –ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞:\n\n"
                 f"ID: {request.id}\n"
                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name}\n"
                 f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
                 f"–î–∞—Ç–∞: {request.request_date.strftime('%d.%m.%Y %H:%M')}\n\n"
                 f"–°—Ç–∞—Ç—É—Å: ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞\n"
                 f"–ü—Ä–∏—á–∏–Ω–∞: {reason}",
            reply_markup=None
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

    bot.send_message(message.chat.id, "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")

def ask_question(chat_id: int):
    """–ó–∞–ø—Ä–æ—Å –≤–æ–ø—Ä–æ—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    bot.send_message(
        chat_id,
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º:",
        reply_markup=types.ForceReply(selective=True)
    )

@bot.message_handler(func=lambda message: message.text in [
    'üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –î–Ω–∏ –î–æ–Ω–æ—Ä–∞',
    'ü©∏ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ –∫—Ä–æ–≤–∏',
    'ü¶¥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ –∫–æ—Å—Ç–Ω–æ–≥–æ –º–æ–∑–≥–∞',
    '‚Ñπ –û –¥–æ–Ω–∞—Ü–∏—è—Ö –≤ –ú–ò–§–ò',
    'üìù –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ',
    '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º',
    '‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'
])
def handle_main_menu(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    chat_id = message.chat.id

    if message.text == 'üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –î–Ω–∏ –î–æ–Ω–æ—Ä–∞':
        show_upcoming_events(chat_id)
    elif message.text == 'ü©∏ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ –∫—Ä–æ–≤–∏':
        show_blood_info(chat_id)
    elif message.text == 'ü¶¥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ –∫–æ—Å—Ç–Ω–æ–≥–æ –º–æ–∑–≥–∞':
        show_bone_marrow_info(chat_id)
    elif message.text == '‚Ñπ –û –¥–æ–Ω–∞—Ü–∏—è—Ö –≤ –ú–ò–§–ò':
        show_mephi_donation_info(chat_id)
    elif message.text == 'üìù –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ':
        show_user_data(chat_id)
    elif message.text == '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º':
        ask_question(chat_id)  # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    elif message.text == '‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å' and chat_id in ADMIN_IDS:
        show_admin_panel(chat_id)

@bot.message_handler(func=lambda message: message.text == '‚öô –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ')
def handle_organizer_admin(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤"""
    from organizer_bot import show_admin_panel
    show_admin_panel(message.chat.id)

@bot.message_handler(func=lambda message: message.reply_to_message and
                                          '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º' in message.reply_to_message.text)
def handle_question(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    question_text = message.text.strip()

    if not question_text or len(question_text) < 5:
        bot.send_message(chat_id, "–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –≤–æ–ø—Ä–æ—Å:",
                         reply_markup=types.ForceReply(selective=True))
        return

    user = get_user_by_chat_id(chat_id)
    if not user:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    new_question = Question(
        user_id=user.id,
        text=question_text,
        answered=False,
        timestamp=datetime.datetime.now()
    )
    session.add(new_question)
    session.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    for admin_id in ADMIN_IDS:
        try:
            bot.send_message(
                admin_id,
                f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –¥–æ–Ω–æ—Ä–∞:\n"
                f"ID –≤–æ–ø—Ä–æ—Å–∞: {new_question.id}\n"
                f"–î–∞—Ç–∞: {new_question.timestamp.strftime('%d.%m.%Y %H:%M')}\n"
                f"–û—Ç: {user.name} ({user.phone})\n\n"
                f"–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:\n{question_text}",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_{new_question.id}")
                )
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")

    bot.send_message(chat_id, "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    start(message)


@bot.message_handler(func=lambda message: message.reply_to_message and
                                          '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:' in message.reply_to_message.text)
def handle_answer(message):
    admin_chat_id = message.chat.id
    answer_text = message.text
    question_id = int(message.reply_to_message.text.split('ID: ')[1].split(')')[0])

    question = session.query(Question).get(question_id)
    if not question:
        bot.send_message(admin_chat_id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    question.answer = answer_text
    question.answered = True
    session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user = session.query(User).get(question.user_id)
    if user:
        try:
            bot.send_message(
                user.chat_id,
                f"üì© –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n{question.text}\n\n"
                f"üí¨ –û—Ç–≤–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤:\n{answer_text}"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.chat_id}: {e}")

    bot.send_message(admin_chat_id, "–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")



@bot.message_handler(content_types=['location'])
def handle_location(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    chat_id = message.chat.id
    user_coords = (message.location.latitude, message.location.longitude)

    nearest_center, distance = get_nearest_center(user_coords)

    if not nearest_center:
        bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–ª–∏–∂–∞–π—à–∏–π —Ü–µ–Ω—Ç—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    if distance < 1:
        distance_str = f"{distance * 1000:.0f} –º–µ—Ç—Ä–æ–≤"
    else:
        distance_str = f"{distance:.1f} –∫–º"

    route_url = get_osm_route_url(user_coords, nearest_center['coords'])
    map_url = get_static_map_url(nearest_center['coords'])

    text = (
        f"üìç <b>–ë–ª–∏–∂–∞–π—à–∏–π —Ü–µ–Ω—Ç—Ä –¥–æ–Ω–æ—Ä—Å—Ç–≤–∞:</b>\n\n"
        f"<b>{nearest_center['name']}</b>\n"
        f"–ê–¥—Ä–µ—Å: {nearest_center['address']}\n\n"
        f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance_str}\n"
        f"<a href='{route_url}'>–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</a>\n\n"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    bot.send_message(
        chat_id,
        text,
        parse_mode='HTML',
        disable_web_page_preview=True,
        reply_markup=main_menu_keyboard(is_admin=(chat_id in ADMIN_IDS))
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–Ω—É—é –∫–∞—Ä—Ç—É
    bot.send_photo(chat_id, map_url, caption="–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ")


@bot.message_handler(func=lambda message: message.text == 'üìç –ë–ª–∏–∂–∞–π—à–∏–π —Ü–µ–Ω—Ç—Ä –¥–æ–Ω–æ—Ä—Å—Ç–≤–∞')
def handle_nearest_center(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ü–µ–Ω—Ç—Ä–∞"""
    chat_id = message.chat.id

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∞–¥—Ä–µ—Å–∞–º–∏
    text = "üè• <b>–ê–¥—Ä–µ—Å–∞ —Ü–µ–Ω—Ç—Ä–æ–≤ –¥–æ–Ω–æ—Ä—Å—Ç–≤–∞ –≤ –ú–æ—Å–∫–≤–µ:</b>\n\n"

    for center in BLOOD_CENTERS:
        text += f"<b>{center['name']}</b>\n"
        text += f"–ê–¥—Ä–µ—Å: {center['address']}\n\n"

    text += "\n–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π –∫ –≤–∞–º —Ü–µ–Ω—Ç—Ä, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(
        types.KeyboardButton('üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', request_location=True),
        types.KeyboardButton('üîô –ù–∞–∑–∞–¥')
    )

    bot.send_message(
        chat_id,
        text,
        parse_mode='HTML',
        reply_markup=keyboard
    )


@bot.message_handler(func=lambda message: message.text in [
    'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
    '‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ–Ω–æ—Ä–æ–≤',
    'üì© –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã',
    'üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É',
    '‚ûï –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
    'üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã',
    'üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ–Ω–∞—Ü–∏–π',
    'üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
    'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
])

def handle_admin_commands(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    chat_id = message.chat.id

    if chat_id not in ADMIN_IDS:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return

    if message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        show_admin_stats(chat_id)
    elif message.text == '‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ–Ω–æ—Ä–æ–≤':
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ–Ω–æ—Ä–æ–≤
        pass
    elif message.text == 'üì© –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã':
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
        pass
    elif message.text == 'üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É':
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
        pass
    elif message.text == '‚ûï –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ':
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        pass
    elif message.text == 'üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã':
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        pass
    elif message.text == 'üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ–Ω–∞—Ü–∏–π':
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ–Ω–∞—Ü–∏–π
        pass
    elif message.text == 'üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É':
        export_stats(chat_id)
    elif message.text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard(is_admin=True))

register_for_event
# ====================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK-–ó–ê–ü–†–û–°–û–í ======================
@bot.callback_query_handler(func=lambda call: call.data.startswith('register_'))
def handle_register_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"""
    event_id = int(call.data.split('_')[1])
    register_for_event(call.message.chat.id, event_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('answer_'))
def handle_answer_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    question_id = int(call.data.split('_')[1])
    answer_question(call.message.chat.id, question_id)


@bot.callback_query_handler(func=lambda call: call.data == 'edit_user_data')
def handle_edit_user_data(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = call.message.chat.id
    user = get_user_by_chat_id(chat_id)

    if not user:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        return

    keyboard = types.InlineKeyboardMarkup(row_width=1)

    btn1 = types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", callback_data="edit_name")
    btn2 = types.InlineKeyboardButton("üìö –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="edit_group")
    btn3 = types.InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –î–ö–ú", callback_data="edit_bm_status")
    btn4 = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")

    keyboard.add(btn1)
    if user.donor_type == 'student':
        keyboard.add(btn2)
    keyboard.add(btn3, btn4)

    try:
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=keyboard
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == 'edit_name')
def handle_edit_name(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û"""
    chat_id = call.message.chat.id
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:", reply_markup=types.ForceReply(selective=True))
    bot.register_next_step_handler(msg, process_name_change)


def process_name_change(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û"""
    chat_id = message.chat.id
    user = get_user_by_chat_id(chat_id)
    new_name = message.text.strip()

    if not user:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        return

    if not validate_name(new_name):
        msg = bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á':",
                               reply_markup=types.ForceReply(selective=True))
        bot.register_next_step_handler(msg, process_name_change)
        return

    user.name = new_name
    session.commit()
    bot.send_message(chat_id, "‚úÖ –§–ò–û —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    show_user_data(chat_id)
    start(message)


@bot.callback_query_handler(func=lambda call: call.data == 'edit_group')
def handle_edit_group(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    chat_id = call.message.chat.id
    user = get_user_by_chat_id(chat_id)

    if not user or user.donor_type != 'student':
        bot.send_message(chat_id, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º.")
        return

    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É:", reply_markup=types.ForceReply(selective=True))
    bot.register_next_step_handler(msg, process_group_change)


def process_group_change(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    chat_id = message.chat.id
    user = get_user_by_chat_id(chat_id)
    new_group = message.text.strip()

    if not user:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        return

    if not validate_group(new_group):
        msg = bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                               reply_markup=types.ForceReply(selective=True))
        bot.register_next_step_handler(msg, process_group_change)
        return

    user.group = new_group
    session.commit()
    bot.send_message(chat_id, "‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
    show_user_data(chat_id)
    start(message)


@bot.callback_query_handler(func=lambda call: call.data == 'back_to_profile')
def handle_back_to_profile(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é"""
    show_user_data(call.message.chat.id)


@bot.callback_query_handler(func=lambda call: call.data in ['edit_bm_status'])
def handle_edit_bm_status(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –î–ö–ú"""
    chat_id = call.message.chat.id
    user = get_user_by_chat_id(chat_id)
    current_status = "–¥–∞" if user.in_bm_registry else "–Ω–µ—Ç"

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("–î–∞", callback_data="set_bm_yes"),
        types.InlineKeyboardButton("–ù–µ—Ç", callback_data="set_bm_no")
    )

    bot.send_message(chat_id, f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤ —Ä–µ–≥–∏—Å—Ç—Ä–µ –î–ö–ú: {current_status}. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞:",
                     reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data in ['set_bm_yes', 'set_bm_no'])
def handle_bm_status_change(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –î–ö–ú"""
    chat_id = call.message.chat.id
    user = get_user_by_chat_id(chat_id)

    if not user:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        return

    if call.data == 'set_bm_yes':
        user.in_bm_registry = True
        session.commit()
        bot.answer_callback_query(call.id, "–°—Ç–∞—Ç—É—Å –î–ö–ú –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–¥–∞'")
    else:
        user.in_bm_registry = False
        session.commit()
        bot.answer_callback_query(call.id, "–°—Ç–∞—Ç—É—Å –î–ö–ú –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–Ω–µ—Ç'")

    show_user_data(chat_id)
    start(message)


# ====================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ======================

class ColoredFormatter(logging.Formatter):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å —Ü–≤–µ—Ç–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""

    GREY = "\x1b[38;20m"
    GREEN = "\x1b[32;20m"
    YELLOW = "\x1b[33;20m"
    RED = "\x1b[31;20m"
    BOLD_RED = "\x1b[31;1m"
    RESET = "\x1b[0m"

    FORMATS = {
        logging.DEBUG: GREEN + "%(asctime)s - %(name)s - %(levelname)s - %(message)s" + RESET,
        logging.INFO: GREEN + "%(asctime)s - %(name)s - %(levelname)s - %(message)s" + RESET,
        logging.WARNING: YELLOW + "%(asctime)s - %(name)s - %(levelname)s - %(message)s" + RESET,
        logging.ERROR: RED + "%(asctime)s - %(name)s - %(levelname)s - %(message)s" + RESET,
        logging.CRITICAL: BOLD_RED + "%(asctime)s - %(name)s - %(levelname)s - %(message)s" + RESET
    }

    def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(log_fmt)
        return formatter.format(record)


if __name__ == "__main__":

    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)

    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    ch.setFormatter(ColoredFormatter())

    logger.addHandler(ch)

    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot.infinity_polling()